{
  "name": "Webp-jxr-middleware",
  "tagline": "Express middleware to replace jpg/png/jpeg with webp/jxr when supported",
  "body": "[![CircleCI](https://circleci.com/gh/obartra/webp-jxr-middleware/tree/master.svg?style=svg)](https://circleci.com/gh/obartra/webp-jxr-middleware/tree/master)\r\n[![API Doc](https://doclets.io/obartra/webp-jxr-middleware/master.svg)](https://doclets.io/obartra/webp-jxr-middleware/master)\r\n[![Coverage Status](https://coveralls.io/repos/github/obartra/webp-jxr-middleware/badge.svg)](https://coveralls.io/github/obartra/webp-jxr-middleware)\r\n[![Dependencies](https://david-dm.org/obartra/webp-jxr-middleware/status.svg)](https://david-dm.org/obartra/webp-jxr-middleware)\r\n[![DevDependencies](https://david-dm.org/obartra/webp-jxr-middleware/dev-status.svg)](https://david-dm.org/obartra/webp-jxr-middleware?type=dev)\r\n## Installation\r\n\r\n```shell\r\nnpm install webp-jxr-middleware\r\n```\r\n\r\n## Usage\r\n\r\nwebp-jxr-middleware should be used before any middleware that is serving files (e.g. `express.static`) so that it serves changed format file.\r\n\r\n```javascript\r\nimport rewriteImg from 'webp-jxr-middleware';\r\nimport express from 'express';\r\nimport { join } from 'path';\r\n\r\nconst app = express();\r\nconst serverPath = join(__dirname, 'public');\r\n\r\napp.use(rewriteImg(serverPath));\r\napp.use(express.static(serverPath));\r\n```\r\n\r\n## ES5\r\n\r\nAn ES5 compatibility build is also included at `lib/es5.js`. To generate it from the source, run `npm run build`.\r\n\r\nYou can require it like:\r\n\r\n```javascript\r\nimport rewriteImg from 'webp-jxr-middleware/lib/es5';\r\n```\r\n\r\n## Overview\r\n\r\nMiddleware to serve JXR and WEBP images when the browser supports them. Works with [Connect](https://github.com/senchalabs/connect/) and [Express](https://github.com/expressjs/express).\r\n\r\nIt is  based off [connect-image-optimus](https://github.com/msemenistyi/connect-image-optimus) and [accept-webp](https://github.com/JoshuaWise/accept-webp). It maintains support for webp and jxr from the `connect-image-optimus` and avoids the UA parsing like `accept-webp`.\r\n\r\n## Development Setup\r\n\r\n1. Fork the repo\r\n2. Run `npm install`\r\n3. Run `./node_modules/.bin/precommit install`\r\n4. Run `npm run dev` to initiate the development server\r\n\r\n## Contributing\r\n\r\n1. Commit your changes following [conventional-changelog format](https://github.com/conventional-changelog/conventional-changelog)\r\n2. Push to a new branch (e.g. `git push origin my-awesome-feature`)\r\n3. Create a new Pull Request\r\n\r\n## License\r\n\r\nMIT\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}